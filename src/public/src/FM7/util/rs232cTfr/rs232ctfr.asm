					EXPORT		RS232C_RECEIVE_FILE
					EXPORT		RS232C_RECEIVE_FILE_NAME
					EXPORT		RS232C_RECEIVE_FILE_TYPE
					EXPORT		RS232C_RECEIVE_FILE_BEGIN
					EXPORT		RS232C_RECEIVE_FILE_SIZE
					EXPORT		RS232C_RECEIVE_FILE_SIZE_ACTUAL
					EXPORT		RS232C_RECEIVE_FILE_EXEC
					EXPORT		RS232C_RECEIVE_FILE_CHECKSUM
					EXPORT		RS232C_RECEIVE_FILE_XOR
					EXPORT		RS232C_RECEIVE_FILE_CHECKSUM_CALC
					EXPORT		RS232C_RECEIVE_FILE_XOR_CALC

					EXPORT		RS232C_RECEIVE_FILE_CHECKSUM_ERROR
					EXPORT		RS232C_RECEIVE_FILE_XOR_ERROR


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


RS232C_RECEIVE_FILE_TYPE		FCB		0
RS232C_RECEIVE_FILE_BEGIN		FDB		$1A00
RS232C_RECEIVE_FILE_SIZE		FDB		$0
RS232C_RECEIVE_FILE_SIZE_ACTUAL	FDB		$0

RS232C_RECEIVE_FILE_EXEC		FDB		$1A00
RS232C_RECEIVE_FILE_CHECKSUM	FDB		$0
RS232C_RECEIVE_FILE_XOR			FCB		0
RS232C_RECEIVE_FILE_CHECKSUM_CALC	FDB		$0
RS232C_RECEIVE_FILE_XOR_CALC			FCB		0

RS232C_RECEIVE_FILE_CHECKSUM_ERROR FCB		0
RS232C_RECEIVE_FILE_XOR_ERROR 	FCB		0

RS232C_RECEIVE_FILE_NAME		FCB		"FILENAME",0

; Change of strategy for reading a binary file.
; Encoding 16 characters into 8 bytes while reading cannot keep up with 19200bps
; First read everything into URA-RAM and then decode after reading.
RS232C_STRING_READ_BUFFER_PTR	EQU		$8000
RS232C_STRING_READ_BUFFER_SIZE	EQU		$100

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


RS232C_RECEIVE_FILE
					PSHS	A,B,X,Y,U,CC

					ORCC	#$50
					LBSR	RS232C_OPEN
					BSR		RS232C_RECEIVE_FILE_SUB
					LBSR	RS232C_CLOSE

					PULS	A,B,X,Y,U,CC,PC

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					; RS232C_RECEIVE_FILE_SUB
					;   Does not open and close RS232C (therefore does not reset at start.)
					;	Does not save registers.
					;	Does not mask IRQs
					;   These must be done in the calling process.

RS232C_RECEIVE_FILE_SUB
					STA		$FD0F

					LDX		RS232C_RECEIVE_FILE_BEGIN,PCR
					STX		RS232C_RECEIVE_FILE_EXEC,PCR
					LDX		#0
					STX		RS232C_RECEIVE_FILE_SIZE,PCR

RS232C_RECEIVE_FILE_WAIT
					LDX		#$6F00
					STX		RS232C_RECEIVE_BUFFER_BEGIN,PCR
					LDX		#$0100
					STX		RS232C_RECEIVE_BUFFER_SIZE,PCR

					LDA		$FD04
					ANDA	#2
					BEQ		RS232C_RECEIVE_FILE_EXIT					; Break key?

					LBSR	RS232C_RECEIVE_ASCII

					LDD		RS232C_RECEIVE_BUFFER_USED,PCR
					BEQ		RS232C_RECEIVE_FILE_WAIT

					LDX		RS232C_RECEIVE_BUFFER_BEGIN,PCR
					LDA		,X+
					STA		RS232C_RECEIVE_FILE_TYPE,PCR

					CMPA	#'A'			; ASCII
					BNE		RS232C_RECEIVE_FILE_NOT_ASCII
					BSR		RS232C_RECEIVE_FILE_BASIC
					BRA		RS232C_RECEIVE_FILE_EXIT
RS232C_RECEIVE_FILE_NOT_ASCII

					CMPA	#'B'
					BNE		RS232C_RECEIVE_FILE_NOT_BINARY
					LBSR	RS232C_RECEIVE_FILE_BINARY
					BRA		RS232C_RECEIVE_FILE_EXIT
RS232C_RECEIVE_FILE_NOT_BINARY

					CMPA	#'F'
					BNE		RS232C_RECEIVE_FILE_NOT_FILENAME
					LBSR	RS232C_RECEIVE_FILE_NAME_FETCH
					BRA		RS232C_RECEIVE_FILE_WAIT


RS232C_RECEIVE_FILE_NOT_FILENAME

RS232C_RECEIVE_FILE_EXIT
					LDA		$FD0F
					RTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


RS232C_RECEIVE_FILE_BASIC
					LDX		RS232C_RECEIVE_FILE_BEGIN,PCR

RS232C_RECEIVE_FILE_BASIC_LOOP
					STX		RS232C_RECEIVE_BUFFER_BEGIN,PCR
					LBSR	RS232C_RECEIVE_ASCII
					LDA		#'Q'
					CMPA	,X
					BEQ		RS232C_RECEIVE_FILE_BASIC_EXIT

					LDD		RS232C_RECEIVE_BUFFER_USED,PCR
					LEAX	D,X
					ADDD	#2
					ADDD	RS232C_RECEIVE_FILE_SIZE,PCR
					STD		RS232C_RECEIVE_FILE_SIZE,PCR

					LDD		#$0D0A
					STD		,X++
					BRA		RS232C_RECEIVE_FILE_BASIC_LOOP


RS232C_RECEIVE_FILE_BASIC_EXIT
					RTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


					; A reg  Input '0'-'9' 'A'-F'
					; A reg  Output 0x00 to 0x0f
					; '0'...48
					; 'A'...65    ('A'-'0'=17)
					; 'a'...97    ('a'-'A'=32)
RS232C_RECEIVE_FILE_XTOA_4BIT
					SUBA	#'0'
					BCS		RS232C_RECEIVE_FILE_XTOA_4BIT_NOT_HEXADECIMAL
					CMPA	#9
					BHI		RS232C_RECEIVE_FILE_XTOA_4BIT_NOT_NUMERIC
					RTS

RS232C_RECEIVE_FILE_XTOA_4BIT_NOT_NUMERIC
					SUBA	#'A'-'0'
					BCS		RS232C_RECEIVE_FILE_XTOA_4BIT_NOT_HEXADECIMAL
					CMPA	#5
					BHI		RS232C_RECEIVE_FILE_XTOA_4BIT_NOT_CAPITAL
					ADDA	#10
					RTS

RS232C_RECEIVE_FILE_XTOA_4BIT_NOT_CAPITAL
					SUBA	#'a'-'A'
					BCS		RS232C_RECEIVE_FILE_XTOA_4BIT_NOT_HEXADECIMAL
					CMPA	#5
					BHI		RS232C_RECEIVE_FILE_XTOA_4BIT_NOT_HEXADECIMAL
					ADDA	#10
					RTS

RS232C_RECEIVE_FILE_XTOA_4BIT_NOT_HEXADECIMAL
					CLRA
					RTS


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

					; X reg two byte ASCII code.  X will be incremented by two.
					; Output A
RS232C_RECEIVE_FILE_XTOA_8BIT
					LDA		,X+
					BSR		RS232C_RECEIVE_FILE_XTOA_4BIT
					LSLA
					LSLA
					LSLA
					LSLA
					PSHS	A
					LDA		,X+
					BSR		RS232C_RECEIVE_FILE_XTOA_4BIT
					ADDA	,S+
					RTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

					; X reg two byte ASCII code.  X will be incremented by four.
					; Output D
RS232C_RECEIVE_FILE_XTOA_16BIT
					BSR		RS232C_RECEIVE_FILE_XTOA_8BIT
					PSHS	A
					BSR		RS232C_RECEIVE_FILE_XTOA_8BIT
					TFR		A,B
					PULS	A,PC

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

RS232C_RECEIVE_FILE_BINARY		; Implementing
					; X pointing to aaaabbbbccccssssxx
					LDD		RS232C_RECEIVE_BUFFER_USED,PCR
					CMPD	#19
					LBLO	RS232C_RECEIVE_FILE_BINARY_EXIT

					BSR		RS232C_RECEIVE_FILE_XTOA_16BIT
					STD		RS232C_RECEIVE_FILE_BEGIN,PCR

					BSR		RS232C_RECEIVE_FILE_XTOA_16BIT
					STD		RS232C_RECEIVE_FILE_SIZE,PCR

					BSR		RS232C_RECEIVE_FILE_XTOA_16BIT
					STD		RS232C_RECEIVE_FILE_EXEC,PCR

					BSR		RS232C_RECEIVE_FILE_XTOA_16BIT
					STD		RS232C_RECEIVE_FILE_CHECKSUM,PCR

					BSR		RS232C_RECEIVE_FILE_XTOA_8BIT
					STA		RS232C_RECEIVE_FILE_XOR,PCR

					LDU		RS232C_RECEIVE_FILE_BEGIN,PCR

					LDD		#RS232C_STRING_READ_BUFFER_PTR
					STD		RS232C_RECEIVE_BUFFER_BEGIN,PCR
					LDD		#RS232C_STRING_READ_BUFFER_SIZE
					STD		RS232C_RECEIVE_BUFFER_SIZE,PCR

					; For some reason (although I believe I set COM port in Binary mode)
					; it drops all zeros.  I need to encode to hexadecimal and decode in FM-7.

					; See "Change of Strategy" above.
					LDU		#RS232C_STRING_READ_BUFFER_PTR
					CLR		,U
RS232C_RECEIVE_FILE_BINARY_LOOP
					LDA		$FD04
					ANDA	#2
					BEQ		RS232C_RECEIVE_FILE_BINARY_LOOP_BREAK					; Break key?

					LBSR	RS232C_RECEIVE_ASCII
					STA		$FD0F													; Re-enable URA RAM

					LDA		#'Q'
					CMPA	,U
					BEQ		RS232C_RECEIVE_FILE_BINARY_LOOP_BREAK

					LDD		RS232C_RECEIVE_BUFFER_USED,PCR
					LEAU	D,U
					STU		RS232C_RECEIVE_BUFFER_BEGIN,PCR
					CLR		,U

					CMPU	#$FC00
					BCS		RS232C_RECEIVE_FILE_BINARY_LOOP

RS232C_RECEIVE_FILE_BINARY_LOOP_BREAK
					TFR		U,D
					SUBD	#RS232C_STRING_READ_BUFFER_PTR
					STD		RS232C_RECEIVE_BUFFER_USED,PCR



					; Now decode

					LDD		RS232C_RECEIVE_BUFFER_USED,PCR
					ANDB	#$FE
					TFR		D,Y

					LDU		RS232C_RECEIVE_FILE_BEGIN,PCR
					LDX		#RS232C_STRING_READ_BUFFER_PTR

RS232C_RECEIVE_FILE_BINARY_DECODE_LOOP
					LBSR	RS232C_RECEIVE_FILE_XTOA_8BIT
					STA		,U+
					LEAY	-2,Y
					BNE		RS232C_RECEIVE_FILE_BINARY_DECODE_LOOP

					TFR		U,D
					SUBD	RS232C_RECEIVE_FILE_BEGIN,PCR
					STD		RS232C_RECEIVE_FILE_SIZE_ACTUAL,PCR



					LDU		RS232C_RECEIVE_FILE_BEGIN,PCR
					LDY		RS232C_RECEIVE_FILE_SIZE,PCR
					LDX		#0
					LDA		#0
RS232C_RECEIVE_FILE_BINARY_CHECKSUMCALC_LOOP
					LDB		,U
					ABX
					EORA	,U+
					LEAY	-1,Y
					BNE		RS232C_RECEIVE_FILE_BINARY_CHECKSUMCALC_LOOP

					CLR		RS232C_RECEIVE_FILE_CHECKSUM_ERROR,PCR
					CLR		RS232C_RECEIVE_FILE_XOR_ERROR,PCR

					STX		RS232C_RECEIVE_FILE_CHECKSUM_CALC,PCR
					STA		RS232C_RECEIVE_FILE_XOR_CALC,PCR

					CMPX	RS232C_RECEIVE_FILE_CHECKSUM,PCR
					BEQ		RS232C_RECEIVE_FILE_BINARY_CHECKSUM_VERIFIED
					INC		RS232C_RECEIVE_FILE_CHECKSUM_ERROR,PCR
RS232C_RECEIVE_FILE_BINARY_CHECKSUM_VERIFIED
					CMPA	RS232C_RECEIVE_FILE_XOR,PCR
					BEQ		RS232C_RECEIVE_FILE_BINARY_XOR_VERIFIED
					INC		RS232C_RECEIVE_FILE_XOR_ERROR,PCR
RS232C_RECEIVE_FILE_BINARY_XOR_VERIFIED

RS232C_RECEIVE_FILE_BINARY_EXIT
					RTS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

RS232C_RECEIVE_FILE_NAME_FETCH
					LEAU	RS232C_RECEIVE_FILE_NAME,PCR
					LDX		RS232C_RECEIVE_BUFFER_BEGIN,PCR
					LDY		RS232C_RECEIVE_BUFFER_USED,PCR
					LEAY	-1,Y
					BEQ		RS232C_RECEIVE_FILE_NAME_EXIT
					leax	1,X
					CMPY	#8
					BLS		RS232C_RECEIVE_FILE_NAME_LOOP
					LDY		#8

RS232C_RECEIVE_FILE_NAME_LOOP
					LDA		,X+
					STA		,U+
					LEAY	-1,Y
					BNE		RS232C_RECEIVE_FILE_NAME_LOOP

RS232C_RECEIVE_FILE_NAME_EXIT
					CLR		,U+
					RTS
